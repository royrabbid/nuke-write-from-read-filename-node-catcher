import nuke
class SetWrite(nukescripts.PythonPanel):
    def __init__(self, node):
                nukescripts.PythonPanel.__init__(self, 'Write Set Up')
                self.rpNode = node
                #Creates Knobs
                self.modeKnob = nuke.Enumeration_Knob('Mode', 'Select Mode ', ['Same as Read', ,'Same as Read + sufix', 'New Path', 'New File Name ', 'Path and FileName'])                                           
                self.formKnob = nuke.Enumeration_Knob('Form', 'Format ', ['exr', 'png', 'tif', 'jpg', 'tga', 'tx'])
                self.csKnob = nuke.Enumeration_Knob('addCS', 'Add ColorSpace ', ['on', 'off'])                               
                self.pathKnob = nuke.String_Knob('newPathame', 'New Path')
                self.pathKnob.setVisible(True)               
                self.fileKnob = nuke.String_Knob('newFile', 'New File') 
                self.fileKnob.setVisible(True) 
                self.sufixKnob = nuke.String_Knob('PrefixU', 'Prefix')
                #Adds Knobs         
                for k in ( self.modeKnob, self.formKnob, self.pathKnob, self.fileKnob, self.sufixKnob, self.csKnob ):
                        self.addKnob(k)
    def KnobChanged( self,modeKnob ):
        if selfModeKnob ==('New fileName', 'Same as Read', 'Same as Read + sufix'):
            self.pathKnob.setVisible(False)
sw = SetWrite(())
sw.showModalDialog()

sufix = str(sw.sufixKnob.value())
fileMode = str(sw.modeKnob.value())
format = str(sw.formKnob.value())
newFile =   str(sw.fileKnob.value())
newPath = str(sw.pathKnob.value())



sn = nuke.selectedNodes()
agregado = 'WHATEVER YOU WANT AT THE END' # adds this variable at the end before the extension.

def upstream(startNode=None,nodes=None):
    if nodes is None:
        nodes = set([])
    node = startNode
    if not node:
        return
    else:
        upNodes = nuke.dependencies(node)
        for n in upNodes:
            nodes.add(n)
            if n.Class() == "Group":
                group = nuke.toNode(n.name())
                with group:
                    outputs = nuke.allNodes('Output')
                    for o in outputs:
                        upstream(o,nodes=nodes)
            upstream(n,nodes=nodes)
    return list(nodes)

for wr in sn:
    nodeList = upstream(nuke.selectedNodes())
    for nds in nodeList:
        global var
        readlist = []
        if nds.Class() == "Read":
            print 'es Read'
            readlist.append(nds)
            for read in readlist:
                print read['file'].getValue()
                read.setSelected(True)
                path =  [read.knobs()['file'].value()] # prints file attr from the selected node
                for repl in path:
                            if fileMode == ('New Path'):
                                spa = repl.split('.') # separates the data by dots present in them.
                                forma = spa.pop(-1)
                                jptha = repl.split('/') # separates the data by dots present in them.
                                filea = jptha.pop(-1)
                                fSplit = filea.split('.')
                                jFilea = fSplit[-2]
                                jptha = repl.split('/') # separates the data by dots present in them.
                                onlyPatha = jptha[-2]
                                mrga ='/'.join(onlyPatha)
                                JustPatha = mrga + ('/')
                                filePa = newPath +'/'+ jFilea +'.'+format 
                                wr['file'].setValue(filePa)
    
                            if fileMode == ('New File Name '):
                                spb = repl.split('.') # separates the data by dots present in them.
                                formb = spb.pop(-1)
                                jpthb = repl.split('/') # separates the data by dots present in them.
                                fileb = jpthb.pop(-1)
                                jpthb = repl.split('/') # separates the data by / present in them.
                                onlyPathb = jpthb[:-1]
                                mrgb ='/'.join(onlyPathb)
                                JustPathb = mrgb + ('/')
                                filePb = JustPathb + newFile +'.'+format                            
                                wr['file'].setValue(filePb)
        
                            if fileMode == ('Same as Read + sufix'):
                                spd = repl.split('.') # separates the data by dots present in them.
                                formd = spd.pop(-1)
                                jnd='.'.join(spd) # merges everything
                                finalPathd = jnd+'_'+sufix+'.'+format   
                                print finalPathd
                                wr['file'].setValue(finalPathd)
    
    
                            if fileMode == ('Path and FileName'):                            
                                filePc = newPath+'/' + newFile +'.'+format
                                wr['file'].setValue(filePc)
    
                            if fileMode == ('Same as Read'):
                                spc = repl.split('.') # separates the data by dots present in them.
                                formc = spc.pop(-1)
                                jnc='.'.join(spc) # merges everything
                                finalPathc = jnc+'.'+format   
                                print finalPathc
                                wr['file'].setValue(finalPathc)
