import nuke


class SetWrite(nukescripts.PythonPanel):
    def __init__(self, node):
                nukescripts.PythonPanel.__init__(self, 'Write Set Up')
                self.rpNode = node
                #Creates Knobs
                self.modeKnob = nuke.Enumeration_Knob('Mode', 'Select Mode ', ['Same as Read' ,'Same as Read + sufix', 'New Path', 'New File Name ', 'Path and FileName'])                                           
                self.formKnob = nuke.Enumeration_Knob('Form', 'Format ', ['exr', 'png', 'tif', 'jpg', 'tga', 'tx'])
                self.csKnob = nuke.Enumeration_Knob('addCS', 'Add ColorSpace ', ['on', 'off'])                               
                self.pathKnob = nuke.String_Knob('newPathame', 'New Path')
                self.pathKnob.setVisible(False)               
                self.fileKnob = nuke.String_Knob('newFile', 'New File') 
                self.fileKnob.setVisible(False) 
                self.sufixKnob = nuke.String_Knob('PrefixU', 'Sufix')
                self.sufixKnob.setVisible(False)
                #Adds Knobs         
                for k in ( self.modeKnob, self.formKnob, self.pathKnob, self.fileKnob, self.sufixKnob, self.csKnob ):
                        self.addKnob(k)
    def knobChanged( self,modeKnob ):
        print "knobChanged", modeKnob
        if modeKnob is self.modeKnob:
            shouldShowP = self.modeKnob.value() not in ('New fileName', 'Same as Read', 'Same as Read + sufix', 'New File Name ')
            self.pathKnob.setVisible(shouldShowP)
        if modeKnob is self.modeKnob:
            shouldShowF = self.modeKnob.value() not in ('New Path', 'Same as Read', 'Same as Read + sufix')
            self.fileKnob.setVisible(shouldShowF)
        if modeKnob is self.modeKnob:
            shouldShowPr = self.modeKnob.value() not in ('New Path', 'Same as Read', 'New File Name ', 'Path and FileName')
            self.sufixKnob.setVisible(shouldShowPr)

def upstream(startNode=None,nodes=None):
        if nodes is None:
            nodes = set([])
        node = startNode
        if not node:
            return
        else:
            upNodes = nuke.dependencies(node)
            for n in upNodes:
                nodes.add(n)
                if n.Class() == "Group":
                    group = nuke.toNode(n.name())
                    with group:
                        outputs = nuke.allNodes('Output')
                        for o in outputs:
                            upstream(o,nodes=nodes)
                upstream(n,nodes=nodes)
        return list(nodes)

def create_write():
    sw = SetWrite(())
    Accepted = sw.showModalDialog()
    if Accepted:
        goScript()
    else:
        print 'Really? Why did you launched me then??!!!!..... you bastard! let me alone!!!!!!(The master Writter)'

def goScript():    
    sr = nuke.selectedNodes()
    sufix = str(sw.sufixKnob.value())
    fileMode = str(sw.modeKnob.value())
    format = str(sw.formKnob.value())
    newFile =   str(sw.fileKnob.value())
    newPath = str(sw.pathKnob.value())
    addColor = str(sw.csKnob.value())
    print 'addColor"', addColor, type(addColor)


    # creates the colorspace and the write nodes
    for i in sr:
        nuke.selectAll()
        nuke.invertSelection()    
        i.setSelected(True)
        if addColor == ('on'):
            nuke.createNode("Colorspace",inpanel=False )
            nuke.selectedNode().knob('colorspace_in').setValue('sRGB')     
            nuke.createNode("Crop",inpanel=False )
            nuke.createNode("Write",inpanel=False )
            if format == ('exr'):
                nuke.selectedNode().knob('channels').setValue('rgb')
                nuke.selectedNode().knob('file_type').setValue('exr')
                nuke.selectedNode().knob('autocrop').setValue('1')
                nuke.selectedNode().knob('metadata').setValue('no metadata')
                nuke.selectedNode().knob('create_directories').setValue(True)
            if format == ('png'):
                nuke.selectedNode().knob('channels').setValue('rgb')
                nuke.selectedNode().knob('file_type').setValue('png')
                nuke.selectedNode().knob('datatype').setValue('16 bit')
                nuke.selectedNode().knob('create_directories').setValue(True)
            if format == ('jpg'):
                nuke.selectedNode().knob('channels').setValue('rgb')
                nuke.selectedNode().knob('file_type').setValue('jpeg')
                nuke.selectedNode().knob('_jpeg_quality').setValue('1')
                nuke.selectedNode().knob('create_directories').setValue(True)
            if format == ('tga'):
                nuke.selectedNode().knob('channels').setValue('rgb')
                nuke.selectedNode().knob('file_type').setValue('targa')
                nuke.selectedNode().knob('compression').setValue('RLE')
                nuke.selectedNode().knob('create_directories').setValue(True)
            if format == ('tif'):
                nuke.selectedNode().knob('channels').setValue('rgb')
                nuke.selectedNode().knob('file_type').setValue('tiff')
                nuke.selectedNode().knob('datatype').setValue('16 bit')
                nuke.selectedNode().knob('compression').setValue('LZW')
                nuke.selectedNode().knob('create_directories').setValue(True)
            if format == ('tx'):
                nuke.selectedNode().knob('channels').setValue('rgb')
                nuke.selectedNode().knob('file_type').setValue('tx')
                nuke.selectedNode().knob('metadata').setValue('no metadata')
                nuke.selectedNode().knob('create_directories').setValue(True)       
            sn = nuke.selectedNodes()
        
            print sn
            #Deals with the allthe write nodes
            for wr in sn:
                nodeList = upstream(nuke.selectedNodes())
                for nds in nodeList:
                    global var
                    readlist = []
                    if nds.Class() == "Read":
                        print 'es Read'
                        readlist.append(nds)
                        for read in readlist:
                            print read['file'].getValue()
                            read.setSelected(True)
                            path =  [read.knobs()['file'].value()] # prints file attr from the selected node
                            print path
                            for repl in path:
                                if fileMode == ('New Path'):
                                    spa = repl.split('.') # separates the data by dots present in them.
                                    forma = spa.pop(-1)
                                    jptha = repl.split('/') # separates the data by dots present in them.
                                    filea = jptha.pop(-1)
                                    fSplit = filea.split('.')
                                    jFilea = fSplit[-2]
                                    jptha = repl.split('/') # separates the data by dots present in them.
                                    onlyPatha = jptha[-2]
                                    mrga ='/'.join(onlyPatha)
                                    JustPatha = mrga + ('/')
                                    filePa = newPath +'/'+ jFilea +'.'+format 
                                    wr['file'].setValue(filePa)
        
                                if fileMode == ('New File Name '):
                                    spb = repl.split('.') # separates the data by dots present in them.
                                    forma = spb.pop(-1)
                                    jpthb = repl.split('/') # separates the data by dots present in them.
                                    fileb = jpthb.pop(-1)
                                    jpthb = repl.split('/') # separates the data by / present in them.
                                    onlyPathb = jpthb[:-1]
                                    mrgb ='/'.join(onlyPathb)
                                    JustPathb = mrgb + ('/')
                                    filePb = JustPathb + newFile +'.'+format                            
                                    wr['file'].setValue(filePb)
            
                                if fileMode == ('Same as Read + sufix'):
                                    spd = repl.split('.') # separates the data by dots present in them.
                                    formd = spd.pop(-1)
                                    jnd='.'.join(spd) # merges everything
                                    finalPathd = jnd+'_'+sufix+'.'+format   
                                    print finalPathd
                                    wr['file'].setValue(finalPathd)
        
        
                                if fileMode == ('Path and FileName'):                            
                                    filePc = newPath+'/' + newFile +'.'+format
                                    wr['file'].setValue(filePc)
        
                                if fileMode == ('Same as Read'):
                                    spc = repl.split('.') # separates the data by dots present in them.
                                    formc = spc.pop(-1)
                                    jnc='.'.join(spc) # merges everything
                                    finalPathc = jnc+'.'+format   
                                    print finalPathc
                                    wr['file'].setValue(finalPathc)
        if addColor == ('off'):             
            nuke.createNode("Crop",inpanel=False )
            nuke.createNode("Write",inpanel=False )
            if format == ('exr'):
                nuke.selectedNode().knob('channels').setValue('rgb')
                nuke.selectedNode().knob('file_type').setValue('exr')
                nuke.selectedNode().knob('autocrop').setValue('1')
                nuke.selectedNode().knob('metadata').setValue('no metadata')
                nuke.selectedNode().knob('create_directories').setValue(True)
            if format == ('png'):
                nuke.selectedNode().knob('channels').setValue('rgb')
                nuke.selectedNode().knob('file_type').setValue('png')
                nuke.selectedNode().knob('datatype').setValue('16 bit')
                nuke.selectedNode().knob('create_directories').setValue(True)
            if format == ('jpg'):
                nuke.selectedNode().knob('channels').setValue('rgb')
                nuke.selectedNode().knob('file_type').setValue('jpeg')
                nuke.selectedNode().knob('_jpeg_quality').setValue('1')
                nuke.selectedNode().knob('create_directories').setValue(True)
            if format == ('tga'):
                nuke.selectedNode().knob('channels').setValue('rgb')
                nuke.selectedNode().knob('file_type').setValue('targa')
                nuke.selectedNode().knob('compression').setValue('RLE')
                nuke.selectedNode().knob('create_directories').setValue(True)
            if format == ('tif'):
                nuke.selectedNode().knob('channels').setValue('rgb')
                nuke.selectedNode().knob('file_type').setValue('tiff')
                nuke.selectedNode().knob('datatype').setValue('16 bit')
                nuke.selectedNode().knob('compression').setValue('LZW')
                nuke.selectedNode().knob('create_directories').setValue(True)
            if format == ('tx'):
                nuke.selectedNode().knob('channels').setValue('rgb')
                nuke.selectedNode().knob('file_type').setValue('tx')
                nuke.selectedNode().knob('metadata').setValue('no metadata')
                nuke.selectedNode().knob('create_directories').setValue(True)       
            sn = nuke.selectedNodes()
        
            print sn
            #Deals with the allthe write nodes
            for wr in sn:
                nodeList = upstream(nuke.selectedNodes())
                for nds in nodeList:
                    global var
                    readlist = []
                    if nds.Class() == "Read":
                        print 'es Read'
                        readlist.append(nds)
                        for read in readlist:
                            print read['file'].getValue()
                            read.setSelected(True)
                            path =  [read.knobs()['file'].value()] # prints file attr from the selected node
                            print path
                            for repl in path:
                                if fileMode == ('New Path'):
                                    spa = repl.split('.') # separates the data by dots present in them.
                                    forma = spa.pop(-1)
                                    jptha = repl.split('/') # separates the data by dots present in them.
                                    filea = jptha.pop(-1)
                                    fSplit = filea.split('.')
                                    jFilea = fSplit[-2]
                                    jptha = repl.split('/') # separates the data by dots present in them.
                                    onlyPatha = jptha[-2]
                                    mrga ='/'.join(onlyPatha)
                                    JustPatha = mrga + ('/')
                                    filePa = newPath +'/'+ jFilea +'.'+format 
                                    wr['file'].setValue(filePa)
        
                                if fileMode == ('New File Name '):
                                    spb = repl.split('.') # separates the data by dots present in them.
                                    forma = spb.pop(-1)
                                    jpthb = repl.split('/') # separates the data by dots present in them.
                                    fileb = jpthb.pop(-1)
                                    jpthb = repl.split('/') # separates the data by / present in them.
                                    onlyPathb = jpthb[:-1]
                                    mrgb ='/'.join(onlyPathb)
                                    JustPathb = mrgb + ('/')
                                    filePb = JustPathb + newFile +'.'+format                            
                                    wr['file'].setValue(filePb)
            
                                if fileMode == ('Same as Read + sufix'):
                                    spd = repl.split('.') # separates the data by dots present in them.
                                    formd = spd.pop(-1)
                                    jnd='.'.join(spd) # merges everything
                                    finalPathd = jnd+'_'+sufix+'.'+format   
                                    print finalPathd
                                    wr['file'].setValue(finalPathd)                           
        
        
                                if fileMode == ('Path and FileName'):                            
                                    filePc = newPath +'/'+ newFile +'.'+format
                                    wr['file'].setValue(filePc)
        
                                if fileMode == ('Same as Read'):
                                    spc = repl.split('.') # separates the data by dots present in them.
                                    formc = spc.pop(-1)
                                    jnc='.'.join(spc) # merges everything
                                    finalPathc = jnc+'.'+format   
                                    print finalPathc
                                    wr['file'].setValue(finalPathc)
        
        


create_write()
