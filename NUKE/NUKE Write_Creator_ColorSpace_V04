# Nuke Write creator V002
import nuke as nk
class SetWrite(nukescripts.PythonPanel):
    def __init__(self, node):
                nukescripts.PythonPanel.__init__(self, 'Write Set Up')
                self.rpNode = node
                #Creates Knobs
                self.modeKnob = nuke.Enumeration_Knob('Mode', 'Select Mode ', ['Same as Read' ,'Same as Read + sufix', 'New Path', 'New File Name ', 'Path and FileName'])                                           
                self.formKnob = nuke.Enumeration_Knob('Form', 'Format ', ['exr', 'png', 'tif', 'jpg', 'tga', 'tx'])
                self.csKnob = nuke.Enumeration_Knob('addCS', 'Add ColorSpace ', ['off', 'on'])
                self.dotKnob = nuke.Enumeration_Knob('addDot', 'Add Dot' , ['on', 'off']) 
                self.cropKnob = nuke.Enumeration_Knob('addCrop','Add Crop', ['on','off'])                              
                self.pathKnob = nuke.String_Knob('newPathame', 'New Path')
                self.pathKnob.setVisible(False)               
                self.fileKnob = nuke.String_Knob('newFile', 'New File') 
                self.fileKnob.setVisible(False) 
                self.sufixKnob = nuke.String_Knob('PrefixU', 'Sufix')
                self.sufixKnob.setVisible(False)
                #Adds Knobs         
                for k in ( self.modeKnob, self.formKnob, self.pathKnob, self.fileKnob, self.sufixKnob, self.dotKnob, self.csKnob, self.cropKnob ):
                        self.addKnob(k)
    def knobChanged( self,modeKnob ):
        print "knobChanged", modeKnob
        if modeKnob is self.modeKnob:
            shouldShowP = self.modeKnob.value() not in ('New fileName', 'Same as Read', 'Same as Read + sufix', 'New File Name ')
            self.pathKnob.setVisible(shouldShowP)
        if modeKnob is self.modeKnob:
            shouldShowF = self.modeKnob.value() not in ('New Path', 'Same as Read', 'Same as Read + sufix')
            self.fileKnob.setVisible(shouldShowF)
        if modeKnob is self.modeKnob:
            shouldShowPr = self.modeKnob.value() not in ('New Path', 'Same as Read', 'New File Name ', 'Path and FileName')
            self.sufixKnob.setVisible(shouldShowPr)

def create_write():
    global sw
    sw = SetWrite(())
    Accepted = sw.showModalDialog()
    if Accepted:
        goScript()
    else:
        print 'Canceled'

def goScript():
    sufix = str(sw.sufixKnob.value())
    fileMode = str(sw.modeKnob.value())
    format = str(sw.formKnob.value())
    newFile =   str(sw.fileKnob.value())
    newPath = str(sw.pathKnob.value())
    sNewPath = newPath.split('\'')
    fNewPath = '/'.join(sNewPath)
    addColor = str(sw.csKnob.value())
    addDot = str(sw.dotKnob.value())
    addCrop = str(sw.cropKnob.value())
    num = 00000
    sn = nk.selectedNodes()
    print 'selectedNodes',sn
    
    def upstream(startNode=None,nodes=None):
            if nodes is None:
                nodes = set([])
            node = startNode
            if not node:
                return
            else:
                upNodes = nk.dependencies(node)
                for n in upNodes:
                    nodes.add(n)
                    if n.Class() == "Group":
                        group = nuke.toNode(n.name())
                        with group:
                            outputs = nuke.allNodes('Output')
                            for o in outputs:
                                upstream(o,nodes=nodes)
                    upstream(n,nodes=nodes)
            return list(nodes)
    ### GET THE FIRST READ AND GETS ITS DATA
    for i in sn:
        #GETS THE FIRST READ'S FILE KNOB AND STORE THAT DATA
        nuke.selectAll()
        nuke.invertSelection()    
        i.setSelected(True) 
        nodesInSelection = upstream(i)
        print nodesInSelection
        readlist = []
        for node in nodesInSelection:
            if node.Class() == "Read":
                print 'read Found'
                readlist.append(node)
        print 'just reads for the dependant nodes  ',readlist
        readNames = []
    ##### GETS THE NAMES OF THE READS
        for s in readlist:
            n = s['name'].value()
            readNames.append(n)
        print 'read names are',readNames,'y es',type(readNames)
        if len(readNames) > 0: # IF THERE'S ONLY ONE READ GET THE MIN
            firstRead = min(readNames)
            print firstRead
        else:
            firstRead = i['name'].value() # GET THE ONLY ONE READ AVAILABLE
            print firstRead
        nuke.selectAll()
        nuke.invertSelection()# DESELECTS 
        nuke.toNode(str(firstRead)).setSelected(True)
        fReadSel = nk.selectedNode()
        print fReadSel    
        firstReadfileKnob = [fReadSel.knobs()['file'].value()]
        print firstReadfileKnob
        for replace in firstReadfileKnob:
            print 'firstReadKnob',replace
            firstReadFormat = (replace.split('.')).pop(-1) # FORMAT'S VARIABLE NAME
            print 'format:', firstReadFormat
            fileEntero = (replace.split('/')).pop(-1)
            fileEntero = fileEntero.split('.')
            fileEntero.pop(-1)
            fileEntero = '.'.join(fileEntero)
            file = fileEntero
            print 'name:',file # FILE-NAME'S VARIABLE NAME
            path = replace.split('/')
            path.pop(-1)
            path = '/'.join(path) # PATH'S VARIABLE NAME
            print 'path:', path
            # CREATES THE EXTRA NODES AND SETS THEM ACORDINGLY
            nuke.selectAll()
            nuke.invertSelection()# DESELECTS
            i.setSelected(True) 
        # CREATES THE NODES AND SETS THEM UP
        if addDot == ('on'):
            nuke.createNode("Dot",inpanel=False )
        if addColor == ('on'):
            nuke.createNode("OCIOColorSpace",inpanel=False )
            nuke.selectedNode().knob('in_colorspace').setValue('project')
            nuke.selectedNode().knob('reformat').setValue('true')
        if addCrop == ('on'):
            nuke.createNode("Crop",inpanel=False )
        nuke.createNode("Write",inpanel=False )
        if format == ('exr'):
            nuke.selectedNode().knob('channels').setValue('rgba')
            nuke.selectedNode().knob('file_type').setValue('exr')
            nuke.selectedNode().knob('autocrop').setValue('1')
            nuke.selectedNode().knob('metadata').setValue('no metadata')
            nuke.selectedNode().knob('create_directories').setValue(True)
        if format == ('png'):
            nuke.selectedNode().knob('channels').setValue('rgba')
            nuke.selectedNode().knob('file_type').setValue('jpeg')
            nuke.selectedNode().knob('_jpeg_quality').setValue('1')
            nuke.selectedNode().knob('datatype').setValue('16 bit')
            nuke.selectedNode().knob('create_directories').setValue(True)
        if format == ('jpg'):
            nuke.selectedNode().knob('channels').setValue('rgba')
            nuke.selectedNode().knob('file_type').setValue('jpeg')
            nuke.selectedNode().knob('_jpeg_quality').setValue('1')
            nuke.selectedNode().knob('create_directories').setValue(True)
        if format == ('tga'):
            nuke.selectedNode().knob('channels').setValue('rgba')
            nuke.selectedNode().knob('file_type').setValue('targa')
            nuke.selectedNode().knob('compression').setValue('RLE')
            nuke.selectedNode().knob('create_directories').setValue(True)
        if format == ('tif'):
            nuke.selectedNode().knob('channels').setValue('rgba')
            nuke.selectedNode().knob('file_type').setValue('tiff')
            nuke.selectedNode().knob('datatype').setValue('16 bit')
            nuke.selectedNode().knob('compression').setValue('LZW')
            nuke.selectedNode().knob('create_directories').setValue(True)
        if format == ('tx'):
            nuke.selectedNode().knob('channels').setValue('rgba')
            nuke.selectedNode().knob('file_type').setValue('tx')
            nuke.selectedNode().knob('metadata').setValue('no metadata')
            nuke.selectedNode().knob('create_directories').setValue(True)
        wr = nk.selectedNode()
        print wr
        # SETS THE WRITE NODE
        if fileMode == ('Same as Read'):
            finalPath = path+ '/' + file + '.' + format   
        if fileMode == ('Same as Read + sufix'):
            finalPath = path + '/' + file + '_' + sufix +  '.' + format   
        if fileMode == ('New File Name '):
            finalPath = path + '/' + newFile + '.' + format   
        if fileMode == ('New Path'):
            finalPath = fNewPath + '/' + file + '.' + format
        if fileMode == ('Path and FileName'):
            num += 1
            finalPath = newPath + '/' + newFile + '_' + str(num) + '.' + format 
        wr['file'].setValue(finalPath)

create_write()


